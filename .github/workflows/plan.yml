name: Terraform Planning Pipeline

# Controls when the workflow will run
on:
  pull_request:
    branches: ["dev", "main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  id-token: write # Necesario para OIDC con AWS (opcional)
  pull-requests: write

env:
  TF_VERSION: 1.11.4

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "terraform"
  terraform:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up vars
        run: |
          echo "${{ secrets.TFVARS_B64 }}" | base64 -d > environments/devops/terraform.tfvars
          # Verifica que el archivo se creÃ³ correctamente

      - name: Set up GCP credentials
        run: |
          pwd
          echo '${{ secrets.GCP_SA_CREDENTIALS_DEVOPS }}' > environments/devops/terraform-cluster.key.devops.json

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_DEVOPS }}

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_DEVOPS }}

      # Configura AWS (usando secrets)
      - name: Set up AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      # --- PASO 2: Instalar herramientas ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Cache plugin dir
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.56.0
      - name: Show version
        run: tflint --version

      # --- PASO 3: Linter ---
      - name: Init TFLint
        run: tflint --init
        env:
          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        run: tflint -f compact

      # --- PASO 4: Validaciones ---
      - name: Run Terraform Apply
        run: |
          chmod +x scripts/plan_terraform.sh devops
